events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; worker-src 'self' blob:; child-src 'self' blob:" always;
    
    # Cross-origin isolation for WebAssembly threading and WebGPU
    add_header Cross-Origin-Embedder-Policy "require-corp" always;
    add_header Cross-Origin-Opener-Policy "same-origin" always;

    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html index.htm;

        # Handle React Router (SPA) - redirect root to /cardcam/
        location = / {
            return 301 /cardcam/;
        }
        
        # Handle the React app at /cardcam/
        location /cardcam/ {
            alias /usr/share/nginx/html/;
            try_files $uri $uri/ /cardcam/index.html;
        }
        
        # Handle root requests for backwards compatibility
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Cache static assets (including .mjs files for ONNX Runtime)
        location ~* \.(js|mjs|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Security for sensitive files
        location ~ /\. {
            deny all;
        }

        # ONNX model files
        location ~* \.onnx$ {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # WebAssembly files
        location ~* \.wasm$ {
            add_header Access-Control-Allow-Origin "*";
            add_header Content-Type "application/wasm";
        }

        # JavaScript module files
        location ~* \.mjs$ {
            add_header Access-Control-Allow-Origin "*";
            add_header Content-Type "text/javascript";
        }
    }
}
